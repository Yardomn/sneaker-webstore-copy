{"ast":null,"code":"import { HttpHeaders } from '@angular/common/http';\nimport { of } from 'rxjs';\nimport { catchError, tap } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"./message.service\";\nimport * as i3 from \"./sharing-service\";\nimport * as i4 from \"./login.service\";\nimport * as i5 from \"./product.service\";\nimport * as i6 from \"@angular/router\";\nimport * as i7 from \"./product-sharing-service\";\n/**\n * Methods for cart functionality, including add and remove product\n */\nexport class ShoppingCartService {\n  constructor(http, messageService, sharingService, userService, productService, router, productSharingService) {\n    this.http = http;\n    this.messageService = messageService;\n    this.sharingService = sharingService;\n    this.userService = userService;\n    this.productService = productService;\n    this.router = router;\n    this.productSharingService = productSharingService;\n    this.shoppingCartUrl = 'http://localhost:8080/shoppingCart';\n    this.currQuantity = 0;\n    this.httpOptions = {\n      headers: new HttpHeaders({\n        'Content-Type': 'application/json'\n      })\n    };\n  }\n  /**\n   * directs user to their cart\n   */\n  navigateToCart() {\n    this.router.navigateByUrl(\"/cart\");\n  }\n  /** GET cart from the server */\n  getCart(id) {\n    const url = `${this.shoppingCartUrl}/${id}`;\n    return this.http.get(url).pipe(tap(_ => this.log('fetch shopping cart')), catchError(this.handleError('getShoppingCartError')));\n  }\n  /**\n   * decreases product quantity in inventory by 1\n   * helper for addToCartMain()\n   *\n   * @param productUpdate\n   */\n  updateQuantityAdd(productUpdate) {\n    let id = productUpdate.id;\n    let name = productUpdate.name;\n    let price = productUpdate.price;\n    let quantity = productUpdate.quantity - 1;\n    let description = productUpdate.description;\n    productUpdate = {\n      id,\n      name,\n      price,\n      quantity,\n      description\n    };\n    this.productService.updateProduct(productUpdate).subscribe(product => productUpdate = product);\n  }\n  /**\n   * Add product to user's cart and direct them to their cart\n   *\n   * @param product\n   */\n  addToCartMain(product) {\n    console.log(product);\n    this.currentUser = this.sharingService.getData();\n    if (this.currentUser != undefined) {\n      this.cart = this.currentUser.cart;\n      console.log(this.cart);\n      let cartProduct = product;\n      cartProduct.quantity = 1;\n      this.cart.push(cartProduct);\n      this.userService.updateUser(this.currentUser).subscribe(currentUser => this.currentUser = currentUser);\n      this.sharingService.setData(this.currentUser);\n      console.log(\"Before statement this.updateQuantityAdd(product);\");\n      console.log(product);\n      this.updateQuantityAdd(product);\n      this.navigateToCart();\n    }\n  }\n  /**\n   * returns length of cart\n   * @param cart\n   * @returns\n   */\n  getCartLength(cart) {\n    return cart.length;\n  }\n  /**\n   * Removes the product from the user's cart\n   *\n   * @param product\n   */\n  removeFromCart(product) {\n    this.currentUser = this.sharingService.getData();\n    let firstRemoval = this.productSharingService.getData()[1];\n    if (firstRemoval) {\n      this.currQuantity = this.productSharingService.getData()[0];\n    } else {\n      this.currQuantity++;\n    }\n    if (this.currentUser != undefined) {\n      this.cart = this.currentUser.cart;\n      length = this.getCartLength(this.cart);\n      this.updateCartQuantity(this.cart, product, this.currQuantity);\n      var i;\n      let foundType = false;\n      let foundProduct = false;\n      for (i = length - 1; i >= 0; i--) {\n        if (this.cart[i].name === product.name) {\n          if (!foundType) {\n            this.currQuantity = this.cart[i].quantity;\n            foundType = true;\n          }\n        }\n      }\n      for (i = length - 1; i >= 0; i--) {\n        if (product == this.cart[i] && !foundProduct) {\n          this.cart.splice(i, 1);\n          this.userService.updateUser(this.currentUser).subscribe(currentUser => this.currentUser = currentUser);\n          this.sharingService.setData(this.currentUser);\n          this.updateQuantityRemove(product, this.currQuantity);\n          foundProduct = true;\n        }\n      }\n    }\n  }\n  remCart(product) {\n    if (this.currentUser) {\n      let l = this.currentUser.cart.length;\n      for (let i = 0; i < l; i++) {\n        if (product.id == this.currentUser.cart[i].id) {\n          let inventoryListing;\n          this.productService.getProduct(product.id).subscribe(result => inventoryListing = result);\n          if (inventoryListing) {\n            console.log(inventoryListing);\n            inventoryListing.quantity += product.quantity;\n            console.log(inventoryListing);\n            this.currentUser.cart.splice(i, 1);\n            console.log(this.currentUser.cart[i]);\n            this.productService.updateProduct(inventoryListing);\n          }\n          break;\n        }\n      }\n    }\n  }\n  addQuantity(product) {\n    console.log(\"start\");\n    this.currentUser = this.sharingService.getData();\n    console.log(this.currentUser);\n    if (this.currentUser) {\n      console.log(\"triggered\");\n      let l = this.currentUser.cart.length;\n      for (let i = 0; i < l; i++) {\n        if (product.id == this.currentUser.cart[i].id) {\n          let inventoryListing;\n          this.productService.getProduct(product.id).subscribe(result => inventoryListing = result);\n          console.log(inventoryListing);\n          console.log(\"FindInventoryProduct Triggered\");\n          this.findProductInInventory(product);\n          console.log(\"FindInventoryProduct completed\");\n          if (inventoryListing) {\n            console.log(\"Found product\");\n            if (inventoryListing.quantity == 0) {\n              window.alert(\"This is the maximum quantity of the product that we currently have\");\n              return;\n            }\n            inventoryListing.quantity -= 1;\n            console.log(inventoryListing);\n            this.currentUser.cart[i].quantity += 1;\n            console.log(this.currentUser);\n            this.productService.updateProduct(inventoryListing);\n            this.sharingService.setData(this.currentUser);\n            return;\n          }\n        }\n      }\n    }\n  }\n  reduceQuantity(product) {\n    if (this.currentUser) {\n      let l = this.currentUser.cart.length;\n      for (let i = 0; i < l; i++) {\n        if (product.id == this.currentUser.cart[i].id) {\n          let inventoryListing;\n          this.productService.getProduct(product.id).subscribe(result => inventoryListing = result);\n          if (inventoryListing) {\n            if (this.currentUser.cart[i].quantity == 1) {\n              //window.alert(\"The cart can only have a minimum of 1 per item. If you no longer wish to have this\");\n              this.remCart(product);\n              return;\n            }\n            inventoryListing.quantity += 1;\n            this.currentUser.cart[i].quantity -= 1;\n            this.productService.updateProduct(inventoryListing);\n            return;\n          }\n        }\n      }\n    }\n  }\n  findProductInInventory(product) {\n    let inventoryProducts = this.productService.getProducts().subscribe();\n    //this.productService.getProducts().subscribe(x => inventoryProducts = x);\n    console.log(inventoryProducts);\n    return product;\n  }\n  /**\n   * updates product with +1 quantity\n   * removeFromCart() helper\n   * @param productUpdate\n   * @param quantity\n   */\n  updateQuantityRemove(productUpdate, quantity) {\n    let id = productUpdate.id;\n    let name = productUpdate.name;\n    let price = productUpdate.price;\n    let description = productUpdate.description;\n    productUpdate = {\n      id,\n      name,\n      price,\n      quantity,\n      description\n    };\n    this.productService.updateProduct(productUpdate).subscribe(product => productUpdate = product);\n  }\n  /**\n   * increases the quantity of each product of the same name by 1\n   * @param cart\n   * @param product\n   */\n  updateCartQuantity(cart, product, quantity) {\n    let length = cart.length;\n    for (var i = length - 1; i >= 0; i--) {\n      if (product.name === cart[i].name) {\n        cart[i].quantity = quantity;\n        quantity++;\n      }\n    }\n  }\n  increaseProductQuantity(product) {\n    //\n  }\n  /**\n   * Handle Http operation that failed.\n   * Let the app continue.\n   *\n   * @param operation - name of the operation that failed\n   * @param result - optional value to return as the observable result\n   */\n  handleError(operation = 'operation', result) {\n    return error => {\n      // TODO: send the error to remote logging infrastructure\n      console.error(error); // log to console instead\n      // TODO: better job of transforming error for user consumption\n      this.log(`${operation} failed: ${error.message}`);\n      // Let the app keep running by returning an empty result.\n      return of(result);\n    };\n  }\n  /** Log a ProductService message with the MessageService */\n  log(message) {\n    this.messageService.add(`ShoppingCartService: ${message}`);\n  }\n}\nShoppingCartService.ɵfac = function ShoppingCartService_Factory(t) {\n  return new (t || ShoppingCartService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.MessageService), i0.ɵɵinject(i3.SharingService), i0.ɵɵinject(i4.LoginService), i0.ɵɵinject(i5.ProductService), i0.ɵɵinject(i6.Router), i0.ɵɵinject(i7.ProductSharingService));\n};\nShoppingCartService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: ShoppingCartService,\n  factory: ShoppingCartService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"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","names":["HttpHeaders","of","catchError","tap","ShoppingCartService","constructor","http","messageService","sharingService","userService","productService","router","productSharingService","headers","navigateToCart","navigateByUrl","getCart","id","url","shoppingCartUrl","get","pipe","_","log","handleError","updateQuantityAdd","productUpdate","name","price","quantity","description","updateProduct","subscribe","product","addToCartMain","console","currentUser","getData","undefined","cart","cartProduct","push","updateUser","setData","getCartLength","length","removeFromCart","firstRemoval","currQuantity","updateCartQuantity","i","foundType","foundProduct","splice","updateQuantityRemove","remCart","l","inventoryListing","getProduct","result","addQuantity","findProductInInventory","window","alert","reduceQuantity","inventoryProducts","getProducts","increaseProductQuantity","operation","error","message","add","factory","providedIn"],"sourceRoot":"","sources":["/Users/aarohanmishra/Documents/SWEN/team-project-2225-swen-261-03-g-team0/estore-ui/src/app/shopping-cart.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\n\nimport { Observable, of } from 'rxjs';\nimport { catchError, tap } from 'rxjs/operators';\n\nimport { Product } from './product';\nimport { ShoppingCart } from './shopping-cart';\nimport { Login } from './login';\nimport { LoginService } from './login.service';\nimport { ProductService } from './product.service';\nimport { Router } from '@angular/router';\nimport { ProductSharingService } from './product-sharing-service';     \nimport { MessageService } from './message.service';\nimport { SharingService } from './sharing-service';\n\n\n/**\n * Methods for cart functionality, including add and remove product\n */\n\n@Injectable({ providedIn: 'root' })\nexport class ShoppingCartService {\n\n  private shoppingCartUrl = 'http://localhost:8080/shoppingCart'; \n\n  currentUser: Login | undefined;\n  cart: Product[] | undefined;\n  currQuantity: number = 0;\n\n  httpOptions = {\n    headers: new HttpHeaders({ 'Content-Type': 'application/json' })\n  };\n\n  constructor(\n    private http: HttpClient,\n    private messageService: MessageService,\n    private sharingService: SharingService,\n    private userService: LoginService,\n    private productService: ProductService,\n    private router: Router,\n    private productSharingService: ProductSharingService\n) { }\n\n  /**\n   * directs user to their cart\n   */\n navigateToCart(){\n  this.router.navigateByUrl(\"/cart\");\n}\n\n  /** GET cart from the server */\n  getCart(id : number): Observable<ShoppingCart> {\n\n    const url = `${this.shoppingCartUrl}/${id}`;\n\n    return this.http.get<ShoppingCart>(url)\n      .pipe(\n        tap(_ => this.log('fetch shopping cart')),\n        catchError(this.handleError<ShoppingCart>('getShoppingCartError'))\n      );\n  }\n\n  /**\n   * decreases product quantity in inventory by 1\n   * helper for addToCartMain()\n   * \n   * @param productUpdate \n   */\n  updateQuantityAdd (productUpdate: Product) {\n    let id = productUpdate.id;\n    let name = productUpdate.name;\n    let price = productUpdate.price;\n    let quantity = productUpdate.quantity - 1;\n    let description = productUpdate.description;\n    productUpdate = {id, name, price, quantity, description} as Product;\n    this.productService.updateProduct(productUpdate).subscribe(product => productUpdate = product);\n  }\n\n  /**\n   * Add product to user's cart and direct them to their cart\n   * \n   * @param product \n   */\n  addToCartMain(product: Product) {\n    console.log(product);\n    this.currentUser = this.sharingService.getData();\n    if (this.currentUser != undefined) {\n      this.cart = this.currentUser.cart;\n      console.log(this.cart);\n      let cartProduct = product;\n      cartProduct.quantity= 1;\n      this.cart.push(cartProduct);\n      this.userService.updateUser(this.currentUser).subscribe(currentUser => this.currentUser = currentUser);\n      this.sharingService.setData(this.currentUser);\n      console.log(\"Before statement this.updateQuantityAdd(product);\");\n      console.log(product);\n      this.updateQuantityAdd(product);\n      this.navigateToCart();\n    }\n  }\n\n  /**\n   * returns length of cart\n   * @param cart \n   * @returns \n   */\n  getCartLength(cart: Product[]): number {\n    return cart.length;\n  }\n\n  /**\n   * Removes the product from the user's cart\n   * \n   * @param product\n   */\n   removeFromCart(product: Product) {\n     this.currentUser = this.sharingService.getData();\n     let firstRemoval = this.productSharingService.getData()[1];\n     if (firstRemoval) {\n      this.currQuantity = this.productSharingService.getData()[0];\n     }\n     else {\n       this.currQuantity++;\n     }\n     if (this.currentUser != undefined) {\n       this.cart = this.currentUser.cart;\n        length = this.getCartLength(this.cart);\n        this.updateCartQuantity(this.cart, product, this.currQuantity);\n        var i: number;\n        let foundType = false\n        let foundProduct = false;\n      \n        for (i = length - 1; i >= 0; i--) {\n          if (this.cart[i].name === product.name) {\n            if (!foundType) {\n              this.currQuantity = this.cart[i].quantity;\n              foundType = true;\n            }\n          }\n        }\n      \n        for (i = length - 1; i>= 0; i--) {\n          if (product == this.cart[i] && !foundProduct) {\n            this.cart.splice(i, 1);\n            this.userService.updateUser(this.currentUser).subscribe(currentUser => this.currentUser = currentUser);\n            this.sharingService.setData(this.currentUser);\n            this.updateQuantityRemove(product, this.currQuantity);\n            foundProduct = true;\n          }\n        }\n    }\n  }\n\n  remCart(product: Product): void{\n    if(this.currentUser){\n      let l= this.currentUser.cart.length;\n      for(let i=0;i<l;i++){\n        if(product.id == this.currentUser.cart[i].id){\n          let inventoryListing: Product | undefined;\n          this.productService.getProduct(product.id).subscribe(result => inventoryListing= result);\n          if(inventoryListing){\n            console.log(inventoryListing);\n            inventoryListing.quantity+= product.quantity;\n            console.log(inventoryListing);\n            this.currentUser.cart.splice(i,1);\n            console.log(this.currentUser.cart[i]);\n            this.productService.updateProduct(inventoryListing);\n          }\n          break;\n        }\n      }\n    }\n  }\n\n  addQuantity(product: Product): void{\n    console.log(\"start\");\n    this.currentUser= this.sharingService.getData();\n    console.log(this.currentUser);\n    if(this.currentUser){\n      console.log(\"triggered\");\n      let l= this.currentUser.cart.length;\n      for(let i= 0; i<l; i++){\n        if(product.id == this.currentUser.cart[i].id){\n          let inventoryListing: Product | undefined;\n          this.productService.getProduct(product.id).subscribe(result => inventoryListing= result);\n          console.log(inventoryListing);\n          console.log(\"FindInventoryProduct Triggered\");\n          this.findProductInInventory(product);\n          console.log(\"FindInventoryProduct completed\");\n          if(inventoryListing){\n            console.log(\"Found product\");\n            if(inventoryListing.quantity == 0){\n              window.alert(\"This is the maximum quantity of the product that we currently have\");\n              return;\n            }\n            inventoryListing.quantity-=1;\n            console.log(inventoryListing);\n            this.currentUser.cart[i].quantity+=1;\n            console.log(this.currentUser);\n            this.productService.updateProduct(inventoryListing);\n            this.sharingService.setData(this.currentUser);\n            return;\n          }\n        }\n      }\n    }\n  }\n\n  reduceQuantity(product: Product): void{\n    if(this.currentUser){\n      let l= this.currentUser.cart.length;\n      for(let i= 0; i<l; i++){\n        if(product.id == this.currentUser.cart[i].id){\n          let inventoryListing: Product | undefined;\n          this.productService.getProduct(product.id).subscribe(result => inventoryListing= result);\n          if(inventoryListing){\n            if(this.currentUser.cart[i].quantity == 1){\n              //window.alert(\"The cart can only have a minimum of 1 per item. If you no longer wish to have this\");\n              this.remCart(product);\n              return;\n            }\n            inventoryListing.quantity+=1;\n            this.currentUser.cart[i].quantity-=1;\n            this.productService.updateProduct(inventoryListing);\n            return;\n          }\n        }\n      }\n    }\n  }\n\n  findProductInInventory(product: Product): Product{\n    let inventoryProducts= this.productService.getProducts().subscribe();\n    //this.productService.getProducts().subscribe(x => inventoryProducts = x);\n    console.log(inventoryProducts);\n    return product;\n  }\n\n  /**\n   * updates product with +1 quantity\n   * removeFromCart() helper\n   * @param productUpdate \n   * @param quantity \n   */\n  updateQuantityRemove(productUpdate: Product, quantity: number) {\n    let id = productUpdate.id;\n    let name = productUpdate.name;\n    let price = productUpdate.price;\n    let description = productUpdate.description;\n    productUpdate = {id, name, price, quantity, description} as Product;\n    this.productService.updateProduct(productUpdate).subscribe(product => productUpdate = product);\n  }\n\n  /**\n   * increases the quantity of each product of the same name by 1\n   * @param cart \n   * @param product \n   */\n  updateCartQuantity(cart: Product[], product: Product, quantity: number) {\n    let length = cart.length;\n    for (var i = length - 1; i >= 0; i--){\n      if (product.name === cart[i].name) {\n        cart[i].quantity = quantity;\n        quantity++;\n      }\n    }\n  }\n\n  increaseProductQuantity(product: Product): void{\n    //\n  }\n\n  /**\n   * Handle Http operation that failed.\n   * Let the app continue.\n   *\n   * @param operation - name of the operation that failed\n   * @param result - optional value to return as the observable result\n   */\n  private handleError<T>(operation = 'operation', result?: T) {\n    return (error: any): Observable<T> => {\n\n      // TODO: send the error to remote logging infrastructure\n      console.error(error); // log to console instead\n\n      // TODO: better job of transforming error for user consumption\n      this.log(`${operation} failed: ${error.message}`);\n\n      // Let the app keep running by returning an empty result.\n      return of(result as T);\n    };\n  }\n\n  /** Log a ProductService message with the MessageService */\n  private log(message: string) {\n    this.messageService.add(`ShoppingCartService: ${message}`);\n  }\n}"]},"metadata":{},"sourceType":"module","externalDependencies":[]}