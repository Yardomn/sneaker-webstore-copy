{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { SharingService } from '../sharing-service';\n/**\n * shopping-cart.component gets the current user and their assigned cart\n */\nlet ShoppingCartComponent = class ShoppingCartComponent {\n  constructor(shoppingCartService, userService, sharingService, productService, productSharingService) {\n    this.shoppingCartService = shoppingCartService;\n    this.userService = userService;\n    this.sharingService = sharingService;\n    this.productService = productService;\n    this.productSharingService = productSharingService;\n    this.inventory = [];\n    this.firstRemoval = true;\n    this.isComplete = false;\n    this.isDiscount = false;\n    this.isAdmin = false;\n    this.isLoggedIn = false;\n    this.total = 0;\n    this.amountSaved = 0;\n    this.discount = \"\";\n    // all discounts are percent of the total\n    this.discountCodes = [[\"SNEAKS\", 30]];\n  }\n  //private sharingService: SharingService,\n  ngOnInit() {\n    this.getProducts();\n    this.currentUser = this.sharingService.getData();\n    if (this.currentUser) {\n      this.isLoggedIn = true;\n      if (this.currentUser.username === \"admin\") {\n        this.isAdmin = true;\n      }\n    }\n    this.products = this.currentUser?.cart;\n    //this.getUser();\n    this.getCart();\n    if (this.shoppingCart != undefined) {\n      this.products = Array.from(this.shoppingCart.shoppingCart.keys());\n    }\n    this.getTotal();\n  }\n  /**\n   * Gets products in inventory\n   */\n  getProducts() {\n    this.productService.getProducts().subscribe(products => this.inventory = products.slice(0, 50));\n  }\n  /**\n   * Gets the current user\n   */\n  getUser() {\n    this.currentUser = this.userService.getCurrUser();\n  }\n  /**\n   * Gets the customer's cart when they are logged in\n   */\n  getCart() {\n    if (this.currentUser != undefined) {\n      this.shoppingCartService.getCart(this.currentUser.id).subscribe(shoppingCart => this.shoppingCart = shoppingCart);\n    }\n  }\n  /**\n   * gets the current quantity of product from inventory\n   * @param inventory\n   * @param product\n   */\n  updateCartWithInventory(inventory, product) {\n    let name = product.name;\n    let quantity = 0;\n    inventory.forEach(element => {\n      if (element.name === name) {\n        quantity = element.quantity + 1;\n      }\n    });\n    return quantity;\n  }\n  /**\n   * Removes selected product from the user's cart\n   *\n   * @param product\n   */\n  removeFromCart(product) {\n    if (this.currentUser != undefined) {\n      let quantity = this.updateCartWithInventory(this.inventory, product);\n      this.productSharingService.setData([quantity, this.firstRemoval]);\n      if (this.firstRemoval) {\n        this.firstRemoval = false;\n      }\n    }\n    this.shoppingCartService.removeFromCart(product);\n    this.getTotal();\n  }\n  /**\n   * sets user status to logged out and brings them to the login page\n   */\n  cartLogOut() {\n    this.userService.logOut();\n  }\n  /**\n   * clears user's cart\n   */\n  completeOrder() {\n    this.currentUser = this.sharingService.getData();\n    if (this.currentUser != undefined) {\n      let cart = this.currentUser.cart;\n      let length = cart.length;\n      for (var i = 0; i < length; i++) {\n        cart.pop();\n      }\n      this.currentUser.cart = cart;\n      this.userService.updateUser(this.currentUser).subscribe(currentUser => this.currentUser = currentUser);\n      this.sharingService.setData(this.currentUser);\n      this.isComplete = true;\n    }\n  }\n  getTotal() {\n    this.currentUser = this.sharingService.getData();\n    let total = 0;\n    if (this.currentUser != undefined) {\n      this.products = this.currentUser?.cart;\n      this.products.forEach(product => {\n        total = total + product.price;\n      });\n    }\n    this.total = total;\n  }\n  applyDiscountCode() {\n    this.discount = document.getElementById(\"dcode\").value;\n    var i = 0;\n    while (this.discountCodes[i]) {\n      let code = this.discountCodes[i];\n      if (this.discount == code[0]) {\n        let substract = this.total * (code[1] / 100);\n        this.total = this.total - substract;\n        this.isDiscount = true;\n        this.amountSaved = substract;\n      }\n      i++;\n    }\n    if (!this.isDiscount) {\n      window.alert(\"This discount code is wrong\");\n    }\n  }\n};\nShoppingCartComponent = __decorate([Component({\n  selector: 'app-cart',\n  templateUrl: './shopping-cart.component.html',\n  styleUrls: ['./shopping-cart.component.css'],\n  providers: [SharingService]\n})], ShoppingCartComponent);\nexport { ShoppingCartComponent };","map":{"version":3,"mappings":"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","names":["Component","SharingService","ShoppingCartComponent","constructor","shoppingCartService","userService","sharingService","productService","productSharingService","ngOnInit","getProducts","currentUser","getData","isLoggedIn","username","isAdmin","products","cart","getCart","shoppingCart","undefined","Array","from","keys","getTotal","subscribe","inventory","slice","getUser","getCurrUser","id","updateCartWithInventory","product","name","quantity","forEach","element","removeFromCart","setData","firstRemoval","cartLogOut","logOut","completeOrder","length","i","pop","updateUser","isComplete","total","price","applyDiscountCode","discount","document","getElementById","value","discountCodes","code","substract","isDiscount","amountSaved","window","alert","selector","templateUrl","styleUrls","providers"],"sourceRoot":"","sources":["/Users/aarohanmishra/Documents/SWEN/team-project-2225-swen-261-03-g-team0/estore-ui/src/app/shopping-cart/shopping-cart.component.ts"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { ShoppingCart } from '../shopping-cart';\nimport { ShoppingCartService } from '../shopping-cart.service';\nimport { Product } from '../product';\nimport { Login } from '../login';\nimport { LoginService } from '../login.service';\nimport { SharingService } from '../sharing-service';\nimport { ProductService } from '../product.service';\nimport { ProductSharingService } from '../product-sharing-service';\n\n\n/**\n * shopping-cart.component gets the current user and their assigned cart\n */\n\n @Component({\n  selector: 'app-cart',\n  templateUrl: './shopping-cart.component.html',\n  styleUrls: ['./shopping-cart.component.css'],\n  providers:[SharingService]\n})\n\nexport class ShoppingCartComponent implements OnInit {\n  \n  shoppingCart: ShoppingCart | undefined;\n  currentUser: Login | undefined;\n  products: Product[] | undefined;\n  inventory: Product[] = [];\n  firstRemoval: boolean = true;\n  isComplete:boolean = false;\n  isDiscount:boolean = false;\n  isAdmin: boolean = false;\n  isLoggedIn: boolean= false;\n  total: number = 0;\n  amountSaved: number = 0;\n  discount : String = \"\";\n  // all discounts are percent of the total\n  discountCodes : [String, number][] = [[\"SNEAKS\",30]]\n  \n\n  constructor(\n    private shoppingCartService: ShoppingCartService,\n    private userService: LoginService,\n    private sharingService: SharingService,\n    private productService: ProductService,\n    private productSharingService: ProductSharingService,\n    ) { }\n    //private sharingService: SharingService,\n  ngOnInit(): void {\n    this.getProducts();\n    this.currentUser = this.sharingService.getData();\n    if(this.currentUser){\n      this.isLoggedIn= true;\n      if(this.currentUser.username === \"admin\"){\n        this.isAdmin= true;\n      }\n    }\n    this.products = this.currentUser?.cart;\n    //this.getUser();\n    this.getCart();\n    if(this.shoppingCart != undefined){\n      this.products = Array.from(this.shoppingCart.shoppingCart.keys());\n    }\n    this.getTotal();\n  }\n\n  /**\n   * Gets products in inventory\n   */\n   getProducts(): void {\n    this.productService.getProducts()\n      .subscribe(products => this.inventory = products.slice(0, 50));\n  }\n\n  /**\n   * Gets the current user\n   */\n  getUser(): void {\n    this.currentUser = this.userService.getCurrUser();\n  }\n\n  /**\n   * Gets the customer's cart when they are logged in \n   */\n  getCart(): void {\n    if(this.currentUser != undefined){\n      this.shoppingCartService.getCart(this.currentUser.id).subscribe(shoppingCart => this.shoppingCart = shoppingCart);\n    }\n  }\n\n  /**\n   * gets the current quantity of product from inventory\n   * @param inventory\n   * @param product\n   */\n   updateCartWithInventory (inventory: Product[], product: Product): number {\n    let name = product.name;\n    let quantity = 0;\n    inventory.forEach(element => {\n      if (element.name === name) {\n        quantity = element.quantity + 1;\n      }\n    });\n    return quantity;\n  }\n\n\n  /**\n   * Removes selected product from the user's cart\n   *\n   * @param product\n   */\n  removeFromCart(product: Product): void {\n    if (this.currentUser != undefined) {\n      let quantity = this.updateCartWithInventory(this.inventory, product);\n      this.productSharingService.setData([quantity, this.firstRemoval]);\n      if (this.firstRemoval) {\n        this.firstRemoval = false;\n      }\n    }\n    this.shoppingCartService.removeFromCart(product);\n    this.getTotal();\n  }\n\n  /**\n   * sets user status to logged out and brings them to the login page\n   */\n  cartLogOut () {\n    this.userService.logOut();\n  }\n\n  /**\n   * clears user's cart\n   */\n  completeOrder(): void {\n    this.currentUser = this.sharingService.getData();\n    if (this.currentUser != undefined) {\n      let cart = this.currentUser.cart;\n      let length = cart.length;\n      for (var i = 0; i < length; i++) {\n        cart.pop();\n      }\n      this.currentUser.cart = cart;\n      this.userService.updateUser(this.currentUser).subscribe(currentUser => this.currentUser = currentUser);\n      this.sharingService.setData(this.currentUser);\n      this.isComplete = true;\n    }\n  }\n\n  getTotal() {\n    this.currentUser = this.sharingService.getData();\n    let total = 0;\n    if (this.currentUser != undefined) {\n      this.products = this.currentUser?.cart;\n      this.products.forEach(product => {\n        total = total + product.price;\n      });\n    }\n    this.total = total;\n  }\n\n  applyDiscountCode() {\n    this.discount=((document.getElementById(\"dcode\") as HTMLInputElement).value);\n\n    var i : number = 0;\n    while(this.discountCodes[i]){\n      let code = this.discountCodes[i];\n      if(this.discount == code[0]) {\n        let substract = this.total * (code[1]/100);\n        this.total = this.total - substract;\n        this.isDiscount = true;\n        this.amountSaved = substract;\n      }\n      i++;\n    }\n    if (!this.isDiscount) {\n      window.alert(\"This discount code is wrong\");\n    }\n  }\n\n}"]},"metadata":{},"sourceType":"module","externalDependencies":[]}