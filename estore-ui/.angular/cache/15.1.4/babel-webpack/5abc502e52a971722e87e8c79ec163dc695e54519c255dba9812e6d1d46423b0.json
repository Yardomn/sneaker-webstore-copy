{"ast":null,"code":"import { Subject } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../login.service\";\nimport * as i2 from \"@angular/common\";\nfunction LoginComponent_div_0_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r5 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"div\")(1, \"h2\");\n    i0.ɵɵtext(2, \"Login:\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"div\")(4, \"label\", 1);\n    i0.ɵɵtext(5, \"New User: \");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelement(6, \"input\", 2, 3);\n    i0.ɵɵelementStart(8, \"button\", 4);\n    i0.ɵɵlistener(\"click\", function LoginComponent_div_0_Template_button_click_8_listener() {\n      i0.ɵɵrestoreView(_r5);\n      const _r2 = i0.ɵɵreference(7);\n      const ctx_r4 = i0.ɵɵnextContext();\n      ctx_r4.add(_r2.value);\n      return i0.ɵɵresetView(_r2.value = \"\");\n    });\n    i0.ɵɵtext(9, \" Add User \");\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(10, \"div\")(11, \"label\", 5);\n    i0.ɵɵtext(12, \"Login: \");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelement(13, \"input\", 6, 3);\n    i0.ɵɵelementStart(15, \"button\", 7);\n    i0.ɵɵlistener(\"click\", function LoginComponent_div_0_Template_button_click_15_listener() {\n      i0.ɵɵrestoreView(_r5);\n      const _r2 = i0.ɵɵreference(7);\n      const ctx_r6 = i0.ɵɵnextContext();\n      ctx_r6.search(_r2.value);\n      return i0.ɵɵresetView(_r2.value = \"\");\n    });\n    i0.ɵɵtext(16, \" Login \");\n    i0.ɵɵelementEnd()()();\n  }\n}\nfunction LoginComponent_div_1_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r8 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"div\")(1, \"h2\");\n    i0.ɵɵtext(2, \"Logout:\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"button\", 8);\n    i0.ɵɵlistener(\"click\", function LoginComponent_div_1_Template_button_click_3_listener() {\n      i0.ɵɵrestoreView(_r8);\n      const ctx_r7 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r7.logout());\n    });\n    i0.ɵɵtext(4, \" Logout \");\n    i0.ɵɵelementEnd()();\n  }\n}\nexport class LoginComponent {\n  constructor(loginService) {\n    this.loginService = loginService;\n    this.users = [];\n    this.enteredUsername = new Subject();\n  }\n  //we need a function that gets the name of what is entered into the box. This will be sent to the backend to check\n  //if the name is an admin or a customer\n  /**\n  getUsername(username: string): void{\n    //this.productService.getProducts()\n    //.subscribe(cart => this.cart= cart);\n    this.username= username;\n  }\n  */\n  add(username) {\n    username = username.trim();\n    if (!username) {\n      return;\n    }\n    this.loginService.addUser({\n      username\n    }).subscribe(user => {\n      this.users.push(user);\n    });\n  }\n  search(username) {\n    //Function to search if the user of this username exists or not\n    this.loginService.findUser(username).subscribe(user => this.currentUser = user);\n    this.changeLoginStatus();\n  }\n  changeLoginStatus() {\n    if (this.currentUser.isLoggedIn == true) {\n      this.currentUser.isLoggedIn = false;\n    } else {\n      this.currentUser.isLoggedIn = true;\n    }\n  }\n  logout() {\n    /** Function to log user out of store */\n    this.changeLoginStatus();\n  }\n}\nLoginComponent.ɵfac = function LoginComponent_Factory(t) {\n  return new (t || LoginComponent)(i0.ɵɵdirectiveInject(i1.LoginService));\n};\nLoginComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: LoginComponent,\n  selectors: [[\"app-login\"]],\n  decls: 2,\n  vars: 2,\n  consts: [[4, \"ngIf\"], [\"for\", \"new-user\"], [\"id\", \"new-user\"], [\"userName\", \"\"], [\"type\", \"button\", 1, \"add-button\", 3, \"click\"], [\"for\", \"returning-user\"], [\"id\", \"returning-user\"], [\"type\", \"button\", 1, \"search-button\", 3, \"click\"], [\"type\", \"button\", 1, \"logout-button\", 3, \"click\"]],\n  template: function LoginComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵtemplate(0, LoginComponent_div_0_Template, 17, 0, \"div\", 0);\n      i0.ɵɵtemplate(1, LoginComponent_div_1_Template, 5, 0, \"div\", 0);\n    }\n    if (rf & 2) {\n      i0.ɵɵproperty(\"ngIf\", !ctx.currentUser.isLoggedIn);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.currentUser.isLoggedIn);\n    }\n  },\n  dependencies: [i2.NgIf],\n  styles: [\"\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n});","map":{"version":3,"mappings":"AACA,SAAqBA,OAAO,QAAQ,MAAM;;;;;;;ICD1CC,2BAAuC;IACjCA,sBAAM;IAAAA,iBAAK;IACfA,2BAAK;IACqBA,0BAAU;IAAAA,iBAAQ;IACxCA,8BAAiC;IAGjCA,iCAA0F;IAAjDA;MAAAA;MAAA;MAAA;MAASC,qBAAmB;MAAA,OAAED,2BAAe,EAAE;IAAA,EAAC;IACvFA,0BACF;IAAAA,iBAAS;IAGbA,4BAAK;IAC2BA,wBAAO;IAAAA,iBAAQ;IAC3CA,+BAAuC;IAGvCA,kCAAgG;IAApDA;MAAAA;MAAA;MAAA;MAASE,wBAAsB;MAAA,OAAEF,2BAAe,EAAE;IAAA,EAAC;IAC7FA,wBACF;IAAAA,iBAAS;;;;;;IAIfA,2BAAoC;IAC9BA,uBAAO;IAAAA,iBAAK;IAChBA,iCAA+D;IAAnBA;MAAAA;MAAA;MAAA,OAASA,8BAAQ;IAAA,EAAC;IAC5DA,wBACF;IAAAA,iBAAS;;;ADdX,OAAM,MAAOG,cAAc;EAOzBC,YAAoBC,YAA0B;IAA1B,iBAAY,GAAZA,YAAY;IALhC,UAAK,GAAW,EAAE;IAEV,oBAAe,GAAG,IAAIN,OAAO,EAAU;EAGC;EAEhD;EACA;EACA;;;;;;;EAQAO,GAAG,CAACC,QAAgB;IAClBA,QAAQ,GAAGA,QAAQ,CAACC,IAAI,EAAE;IAC1B,IAAI,CAACD,QAAQ,EAAE;MAAE;;IACjB,IAAI,CAACF,YAAY,CAACI,OAAO,CAAC;MAAEF;IAAQ,CAAW,CAAC,CAC7CG,SAAS,CAACC,IAAI,IAAG;MAChB,IAAI,CAACC,KAAK,CAACC,IAAI,CAACF,IAAI,CAAC;IACvB,CAAC,CAAC;EACN;EAEAG,MAAM,CAACP,QAAgB;IACrB;IACA,IAAI,CAACF,YAAY,CAACU,QAAQ,CAACR,QAAQ,CAAC,CACnCG,SAAS,CACRC,IAAI,IAAI,IAAI,CAACK,WAAW,GAAGL,IAAI,CAC9B;IACH,IAAI,CAACM,iBAAiB,EAAE;EAC1B;EAEAA,iBAAiB;IACf,IAAG,IAAI,CAACD,WAAW,CAACE,UAAU,IAAI,IAAI,EAAC;MACrC,IAAI,CAACF,WAAW,CAACE,UAAU,GAAE,KAAK;KACnC,MACG;MACF,IAAI,CAACF,WAAW,CAACE,UAAU,GAAE,IAAI;;EAErC;EAEAC,MAAM;IACJ;IACA,IAAI,CAACF,iBAAiB,EAAE;EAC1B;;AAjDWd,cAAc;mBAAdA,cAAc;AAAA;AAAdA,cAAc;QAAdA,cAAc;EAAAiB;EAAAC;EAAAC;EAAAC;EAAAC;IAAA;MCb3BxB,gEAqBM;MAENA,+DAKM;;;MA5BAA,kDAA+B;MAuB/BA,eAA4B;MAA5BA,iDAA4B","names":["Subject","i0","ctx_r4","ctx_r6","LoginComponent","constructor","loginService","add","username","trim","addUser","subscribe","user","users","push","search","findUser","currentUser","changeLoginStatus","isLoggedIn","logout","selectors","decls","vars","consts","template"],"sourceRoot":"","sources":["/Users/aarohanmishra/Documents/SWEN/team-project-2225-swen-261-03-g-team0/estore-ui/src/app/login/login.component.ts","/Users/aarohanmishra/Documents/SWEN/team-project-2225-swen-261-03-g-team0/estore-ui/src/app/login/login.component.html"],"sourcesContent":["import { Component } from '@angular/core';\nimport { Observable, Subject } from 'rxjs';\nimport {\n  debounceTime, distinctUntilChanged, switchMap\n} from 'rxjs/operators';\nimport { Login } from '../login';\nimport { LoginService } from '../login.service';\n\n@Component({\n  selector: 'app-login',\n  templateUrl: './login.component.html',\n  styleUrls: ['./login.component.css']\n})\nexport class LoginComponent {\n\n  users: Login[]= [];\n  username!: Observable<Login[]>;\n  private enteredUsername = new Subject<string>();\n  currentUser!: Login; \n\n  constructor(private loginService: LoginService){}\n\n  //we need a function that gets the name of what is entered into the box. This will be sent to the backend to check\n  //if the name is an admin or a customer\n  /**\n  getUsername(username: string): void{\n    //this.productService.getProducts()\n    //.subscribe(cart => this.cart= cart);\n    this.username= username;\n  }\n  */\n\n  add(username: string): void {\n    username = username.trim();\n    if (!username) { return; }\n    this.loginService.addUser({ username } as Login)\n      .subscribe(user => {\n        this.users.push(user);\n      });\n  }\n\n  search(username: string): void{\n    //Function to search if the user of this username exists or not\n    this.loginService.findUser(username)\n    .subscribe(\n      user => this.currentUser = user\n      );\n    this.changeLoginStatus();\n  }\n\n  changeLoginStatus(): void{\n    if(this.currentUser.isLoggedIn == true){\n      this.currentUser.isLoggedIn= false;\n    }\n    else{\n      this.currentUser.isLoggedIn= true;\n    }\n  }\n\n  logout(): void{\n    /** Function to log user out of store */\n    this.changeLoginStatus();\n  }\n}\n\n","<div *ngIf=\"!(currentUser.isLoggedIn)\">\n  <h2>Login:</h2>\n  <div>\n      <label for=\"new-user\">New User: </label>\n      <input id=\"new-user\" #userName />\n  \n      <!-- (click) passes input value to add() and then clears the input -->\n      <button type=\"button\" class=\"add-button\" (click)=\"add(userName.value); userName.value=''\">\n        Add User\n      </button>\n  </div>\n\n  <div>\n      <label for=\"returning-user\">Login: </label>\n      <input id=\"returning-user\" #userName />\n  \n      <!-- (click) passes input value to add() and then clears the input -->\n      <button type=\"button\" class=\"search-button\" (click)=\"search(userName.value); userName.value=''\">\n        Login\n      </button>\n  </div>\n</div>\n\n<div *ngIf=\"currentUser.isLoggedIn\">\n  <h2>Logout:</h2>\n  <button type=\"button\" class=\"logout-button\" (click)=\"logout()\">\n    Logout\n  </button>\n</div>"]},"metadata":{},"sourceType":"module","externalDependencies":[]}