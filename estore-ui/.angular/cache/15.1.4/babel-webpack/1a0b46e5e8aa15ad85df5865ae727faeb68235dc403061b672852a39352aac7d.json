{"ast":null,"code":"import { debounceTime, distinctUntilChanged, Subject, switchMap } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../login.service\";\nexport class UserSearchComponent {\n  constructor(loginService) {\n    this.loginService = loginService;\n    /** Working to try and find a way to get the search result as a observable of\n     * a single instance of login, rather than as\n     */\n    //user$!: Observable<Login>;\n    this.username = new Subject();\n  }\n  search(term) {\n    this.username.next(term);\n  }\n  ngOnInit() {\n    this.users$ = this.username.pipe(debounceTime(300), distinctUntilChanged(), switchMap(term => this.loginService.searchUser(term)));\n  }\n}\nUserSearchComponent.ɵfac = function UserSearchComponent_Factory(t) {\n  return new (t || UserSearchComponent)(i0.ɵɵdirectiveInject(i1.LoginService));\n};\nUserSearchComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: UserSearchComponent,\n  selectors: [[\"app-user-search\"]],\n  decls: 5,\n  vars: 0,\n  consts: [[\"id\", \"search-component\"], [\"for\", \"search-box\"], [\"id\", \"search-box\", 3, \"input\"], [\"searchBox\", \"\"]],\n  template: function UserSearchComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      const _r1 = i0.ɵɵgetCurrentView();\n      i0.ɵɵelementStart(0, \"div\", 0)(1, \"label\", 1);\n      i0.ɵɵtext(2, \"Login\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(3, \"input\", 2, 3);\n      i0.ɵɵlistener(\"input\", function UserSearchComponent_Template_input_input_3_listener() {\n        i0.ɵɵrestoreView(_r1);\n        const _r0 = i0.ɵɵreference(4);\n        return i0.ɵɵresetView(ctx.search(_r0.value));\n      });\n      i0.ɵɵelementEnd()();\n    }\n  },\n  styles: [\"\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n});","map":{"version":3,"mappings":"AACA,SAASA,YAAY,EAAEC,oBAAoB,EAAcC,OAAO,EAAEC,SAAS,QAAQ,MAAM;;;AASzF,OAAM,MAAOC,mBAAmB;EAQ9BC,YAAoBC,YAA0B;IAA1B,iBAAY,GAAZA,YAAY;IANhC;;;IAGA;IACQ,aAAQ,GAAE,IAAIJ,OAAO,EAAU;EAES;EAEhDK,MAAM,CAACC,IAAY;IACjB,IAAI,CAACC,QAAQ,CAACC,IAAI,CAACF,IAAI,CAAC;EAC1B;EAEAG,QAAQ;IACN,IAAI,CAACC,MAAM,GAAE,IAAI,CAACH,QAAQ,CAACI,IAAI,CAC7Bb,YAAY,CAAC,GAAG,CAAC,EACjBC,oBAAoB,EAAE,EACtBE,SAAS,CAAEK,IAAY,IAAK,IAAI,CAACF,YAAY,CAACQ,UAAU,CAACN,IAAI,CAAC,CAAC,CAChE;EACH;;AApBWJ,mBAAmB;mBAAnBA,mBAAmB;AAAA;AAAnBA,mBAAmB;QAAnBA,mBAAmB;EAAAW;EAAAC;EAAAC;EAAAC;EAAAC;IAAA;;MCVhCC,8BAA2B;MACCA,qBAAK;MAAAA,iBAAQ;MACrCA,mCAAsE;MAApCA;QAAAA;QAAA;QAAA,OAASA,oCAAuB;MAAA,EAAC;MAAnEA,iBAAsE","names":["debounceTime","distinctUntilChanged","Subject","switchMap","UserSearchComponent","constructor","loginService","search","term","username","next","ngOnInit","users$","pipe","searchUser","selectors","decls","vars","consts","template","i0"],"sourceRoot":"","sources":["/Users/aarohanmishra/Documents/SWEN/team-project-2225-swen-261-03-g-team0/estore-ui/src/app/user-search/user-search.component.ts","/Users/aarohanmishra/Documents/SWEN/team-project-2225-swen-261-03-g-team0/estore-ui/src/app/user-search/user-search.component.html"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { debounceTime, distinctUntilChanged, Observable, Subject, switchMap } from 'rxjs';\nimport { Login } from '../login';\nimport { LoginService } from '../login.service';\n\n@Component({\n  selector: 'app-user-search',\n  templateUrl: './user-search.component.html',\n  styleUrls: ['./user-search.component.css']\n})\nexport class UserSearchComponent implements OnInit {\n  users$!: Observable<Login[]>;\n  /** Working to try and find a way to get the search result as a observable of \n   * a single instance of login, rather than as \n   */\n  //user$!: Observable<Login>;\n  private username= new Subject<string>();\n\n  constructor(private loginService: LoginService){}\n\n  search(term: string): void{\n    this.username.next(term);\n  }\n\n  ngOnInit(): void {\n    this.users$= this.username.pipe(\n      debounceTime(300),\n      distinctUntilChanged(),\n      switchMap((term: string) => this.loginService.searchUser(term))\n    );\n  }\n}\n","<div id=\"search-component\">\n    <label for=\"search-box\">Login</label>\n    <input #searchBox id=\"search-box\" (input)=\"search(searchBox.value)\" />\n</div>"]},"metadata":{},"sourceType":"module","externalDependencies":[]}