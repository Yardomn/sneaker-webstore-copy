{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"../login.service\";\nimport * as i2 from \"@angular/common\";\nimport * as i3 from \"@angular/router\";\nimport * as i4 from \"../sharing-service\";\nfunction LoginComponent_div_0_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r5 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"div\", 2)(1, \"h2\", 3);\n    i0.ɵɵtext(2, \"Login:\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"div\")(4, \"label\", 4);\n    i0.ɵɵtext(5, \"New User: \");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelement(6, \"input\", 5, 6);\n    i0.ɵɵelementStart(8, \"button\", 7);\n    i0.ɵɵlistener(\"click\", function LoginComponent_div_0_Template_button_click_8_listener() {\n      i0.ɵɵrestoreView(_r5);\n      const _r2 = i0.ɵɵreference(7);\n      const ctx_r4 = i0.ɵɵnextContext();\n      ctx_r4.add(_r2.value);\n      return i0.ɵɵresetView(_r2.value = \"\");\n    });\n    i0.ɵɵtext(9, \" Add User \");\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(10, \"div\")(11, \"label\", 8);\n    i0.ɵɵtext(12, \"Login: \");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelement(13, \"input\", 9, 10);\n    i0.ɵɵelementStart(15, \"button\", 11);\n    i0.ɵɵlistener(\"click\", function LoginComponent_div_0_Template_button_click_15_listener() {\n      i0.ɵɵrestoreView(_r5);\n      const _r3 = i0.ɵɵreference(14);\n      const ctx_r6 = i0.ɵɵnextContext();\n      ctx_r6.login(_r3.value);\n      return i0.ɵɵresetView(_r3.value = \"\");\n    });\n    i0.ɵɵtext(16, \" Login \");\n    i0.ɵɵelementEnd()()();\n  }\n}\nfunction LoginComponent_div_1_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r8 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"div\")(1, \"h2\", 3);\n    i0.ɵɵtext(2, \"Logout:\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"button\", 12);\n    i0.ɵɵlistener(\"click\", function LoginComponent_div_1_Template_button_click_3_listener() {\n      i0.ɵɵrestoreView(_r8);\n      const ctx_r7 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r7.logout());\n    });\n    i0.ɵɵtext(4, \" Logout \");\n    i0.ɵɵelementEnd()();\n  }\n}\n/**\r\n * Component of Login/Logout page\r\n * @author: team0\r\n */\nexport class LoginComponent {\n  constructor(loginService, location, router, share) {\n    this.loginService = loginService;\n    this.location = location;\n    this.router = router;\n    this.share = share;\n    /** Array of all users registered */\n    this.users = [];\n    /**Vartiable to keep track if there is a user logged in or not */\n    this.isLoggedIn = false;\n  }\n  /**\r\n   * Actions to be performed upon the page opening\r\n   */\n  ngOnInit() {\n    this.getUsers();\n    if (LoginComponent.currentUser) {\n      this.isLoggedIn = true;\n    }\n  }\n  /**\r\n   * Function to return the current user Logged In\r\n   * @returns any: current user could be of type Login or undefined\r\n   */\n  getCurrentUser() {\n    //return this.currentUser;\n    return LoginComponent.currentUser;\n  }\n  /**\r\n   * Function to get all users registered\r\n   */\n  getUsers() {\n    this.loginService.getUsers().subscribe(users => this.users = users);\n  }\n  /**\r\n   * Function to add a new user with the username passed in the parameter\r\n   * @param username : string value containing the username for the new user\r\n   * @returns : void\r\n   */\n  add(username) {\n    let numUsers = this.users.length;\n    username = username.trim();\n    if (!username) {\n      return;\n    }\n    let newUser = {\n      username\n    };\n    newUser.cart = [];\n    newUser.id = numUsers + 1;\n    this.loginService.addUser(newUser).subscribe(user => {\n      this.users.push(user);\n    });\n    this.router.navigateByUrl(\"/dashboard\");\n  }\n  /**\r\n   * Function to return to the last page before login\r\n   */\n  goBack() {\n    this.location.back();\n  }\n  /**\r\n   * Function to log the user in\r\n   * @param username : string value of username of user to log in\r\n   */\n  login(username) {\n    for (let i = 0; i < this.users.length; i += 1) {\n      if (username === this.users[i].username) {\n        LoginComponent.currentUser = this.users[i];\n        break;\n      }\n    }\n    if (LoginComponent.currentUser) {\n      console.log(this.users);\n      LoginComponent.currentUser.isLoggedIn = true;\n      console.log(LoginComponent.currentUser);\n      this.loginService.updateUser(LoginComponent.currentUser).subscribe();\n      this.isLoggedIn = true;\n      this.share.setData(LoginComponent.currentUser);\n      this.router.navigateByUrl(\"/login\");\n    }\n  }\n  /**\r\n   * Function to log out the current user\r\n   */\n  logout() {\n    /** Function to log user out of store */\n    if (LoginComponent.currentUser) {\n      LoginComponent.currentUser.isLoggedIn = false;\n      for (let i = 0; i < this.users.length; i += 1) {\n        if (LoginComponent.currentUser.username === this.users[i].username) {\n          this.users[i] = LoginComponent.currentUser;\n          break;\n        }\n      }\n      LoginComponent.currentUser = this.share.getData();\n      if (LoginComponent.currentUser) this.loginService.updateUser(LoginComponent.currentUser).subscribe();\n      LoginComponent.currentUser = undefined;\n      this.share.setData(undefined);\n      this.isLoggedIn = false;\n      this.router.navigateByUrl(\"/dashboard\");\n    }\n  }\n}\nLoginComponent.ɵfac = function LoginComponent_Factory(t) {\n  return new (t || LoginComponent)(i0.ɵɵdirectiveInject(i1.LoginService), i0.ɵɵdirectiveInject(i2.Location), i0.ɵɵdirectiveInject(i3.Router), i0.ɵɵdirectiveInject(i4.SharingService));\n};\nLoginComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: LoginComponent,\n  selectors: [[\"app-login\"]],\n  decls: 2,\n  vars: 2,\n  consts: [[\"class\", \"wrapper\", 4, \"ngIf\"], [4, \"ngIf\"], [1, \"wrapper\"], [1, \"titles\"], [\"for\", \"new-user\"], [\"id\", \"new-user\"], [\"userName\", \"\"], [\"type\", \"button\", 1, \"add-button\", 3, \"click\"], [\"for\", \"returning-user\"], [\"id\", \"returning-user\"], [\"username\", \"\"], [\"type\", \"button\", 1, \"search-button\", 3, \"click\"], [\"type\", \"button\", 1, \"logout-button\", 3, \"click\"]],\n  template: function LoginComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵtemplate(0, LoginComponent_div_0_Template, 17, 0, \"div\", 0);\n      i0.ɵɵtemplate(1, LoginComponent_div_1_Template, 5, 0, \"div\", 1);\n    }\n    if (rf & 2) {\n      i0.ɵɵproperty(\"ngIf\", ctx.isLoggedIn == false);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.isLoggedIn);\n    }\n  },\n  dependencies: [i2.NgIf],\n  styles: [\".wrapper[_ngcontent-%COMP%]{\\r\\n  text-align: center;\\r\\n}\\r\\nlabel[_ngcontent-%COMP%] {\\r\\n    color: #4a0101;\\r\\n    font-weight: bold;\\r\\n  }\\r\\n  input[_ngcontent-%COMP%] {\\r\\n    font-size: 1em;\\r\\n    padding: .5rem;\\r\\n  }\\r\\n  .titles[_ngcontent-%COMP%]{\\r\\n    color: #4a0101\\r\\n  }\\r\\n  button[_ngcontent-%COMP%] {\\r\\n    margin-top: 20px;\\r\\n    background-color: #e84d4d;\\r\\n    color: #E6E0C0;\\r\\n    padding: 1rem;\\r\\n    border-radius: 4px;\\r\\n    font-size: 1rem;\\r\\n  }\\r\\n  button[_ngcontent-%COMP%]:hover {\\r\\n    background-color: #7a0f0f;\\r\\n    text-decoration: underline;\\r\\n  }\\r\\n  button[_ngcontent-%COMP%]:disabled {\\r\\n    background-color: #eee;\\r\\n    color: #ccc;\\r\\n    cursor: auto;\\r\\n  }\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8uL3NyYy9hcHAvbG9naW4vbG9naW4uY29tcG9uZW50LmNzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSx3Q0FBd0M7QUFDeEM7RUFDRSxrQkFBa0I7QUFDcEI7QUFDQTtJQUNJLGNBQWM7SUFDZCxpQkFBaUI7RUFDbkI7RUFDQTtJQUNFLGNBQWM7SUFDZCxjQUFjO0VBQ2hCO0VBQ0E7SUFDRTtFQUNGO0VBQ0E7SUFDRSxnQkFBZ0I7SUFDaEIseUJBQXlCO0lBQ3pCLGNBQWM7SUFDZCxhQUFhO0lBQ2Isa0JBQWtCO0lBQ2xCLGVBQWU7RUFDakI7RUFDQTtJQUNFLHlCQUF5QjtJQUN6QiwwQkFBMEI7RUFDNUI7RUFDQTtJQUNFLHNCQUFzQjtJQUN0QixXQUFXO0lBQ1gsWUFBWTtFQUNkIiwic291cmNlc0NvbnRlbnQiOlsiLyogTG9naW5Db21wb25lbnQncyBwcml2YXRlIENTUyBzdHlsZXMgKi9cclxuLndyYXBwZXJ7XHJcbiAgdGV4dC1hbGlnbjogY2VudGVyO1xyXG59XHJcbmxhYmVsIHtcclxuICAgIGNvbG9yOiAjNGEwMTAxO1xyXG4gICAgZm9udC13ZWlnaHQ6IGJvbGQ7XHJcbiAgfVxyXG4gIGlucHV0IHtcclxuICAgIGZvbnQtc2l6ZTogMWVtO1xyXG4gICAgcGFkZGluZzogLjVyZW07XHJcbiAgfVxyXG4gIC50aXRsZXN7XHJcbiAgICBjb2xvcjogIzRhMDEwMVxyXG4gIH1cclxuICBidXR0b24ge1xyXG4gICAgbWFyZ2luLXRvcDogMjBweDtcclxuICAgIGJhY2tncm91bmQtY29sb3I6ICNlODRkNGQ7XHJcbiAgICBjb2xvcjogI0U2RTBDMDtcclxuICAgIHBhZGRpbmc6IDFyZW07XHJcbiAgICBib3JkZXItcmFkaXVzOiA0cHg7XHJcbiAgICBmb250LXNpemU6IDFyZW07XHJcbiAgfVxyXG4gIGJ1dHRvbjpob3ZlciB7XHJcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjN2EwZjBmO1xyXG4gICAgdGV4dC1kZWNvcmF0aW9uOiB1bmRlcmxpbmU7XHJcbiAgfVxyXG4gIGJ1dHRvbjpkaXNhYmxlZCB7XHJcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjZWVlO1xyXG4gICAgY29sb3I6ICNjY2M7XHJcbiAgICBjdXJzb3I6IGF1dG87XHJcbiAgfSJdLCJzb3VyY2VSb290IjoiIn0= */\"]\n});","map":{"version":3,"mappings":"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","names":["i0","ctx_r4","ctx_r6","LoginComponent","constructor","loginService","location","router","share","ngOnInit","getUsers","currentUser","isLoggedIn","getCurrentUser","subscribe","users","add","username","numUsers","length","trim","newUser","cart","id","addUser","user","push","navigateByUrl","goBack","back","login","i","console","log","updateUser","setData","logout","getData","undefined","selectors","decls","vars","consts","template"],"sourceRoot":"","sources":["C:\\Users\\raymo\\SWEN261\\team-project-2225-swen-261-03-g-team0\\estore-ui\\src\\app\\login\\login.component.html","C:\\Users\\raymo\\SWEN261\\team-project-2225-swen-261-03-g-team0\\estore-ui\\src\\app\\login\\login.component.ts"],"sourcesContent":["<div class=\"wrapper\" *ngIf=\"isLoggedIn == false\">\r\n  <h2 class = \"titles\">Login:</h2>\r\n  <div>\r\n      <label for=\"new-user\">New User: </label>\r\n      <input id=\"new-user\" #userName />\r\n  \r\n      <!-- (click) passes input value to add() and then clears the input -->\r\n      <button type=\"button\" class=\"add-button\" (click)=\"add(userName.value); userName.value=''\">\r\n        Add User\r\n      </button>\r\n  </div>\r\n\r\n  <div>\r\n      <label for=\"returning-user\">Login: </label>\r\n      <input id=\"returning-user\" #username />\r\n  \r\n      <!-- (click) passes input value to login() and then clears the input -->\r\n      <button type=\"button\" class=\"search-button\" (click)=\"login(username.value); username.value=''\">\r\n        Login\r\n      </button>\r\n  </div>\r\n</div>\r\n\r\n<div *ngIf=\"isLoggedIn\">\r\n  <h2 class = \"titles\">Logout:</h2>\r\n  <button type=\"button\" class=\"logout-button\" (click)=\"logout()\">\r\n    Logout\r\n  </button>\r\n</div>","import { Component, OnInit } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { Location } from '@angular/common';\r\nimport { Login } from '../login';\r\nimport { LoginService } from '../login.service';\r\nimport { Router } from '@angular/router';\r\nimport { AppComponent } from '../app.component';\r\nimport { SharingService } from '../sharing-service';\r\nimport { ProductService } from '../product.service';\r\n\r\n/**\r\n * Component of Login/Logout page\r\n * @author: team0\r\n */\r\n@Component({\r\n  selector: 'app-login',\r\n  templateUrl: './login.component.html',\r\n  styleUrls: ['./login.component.css']\r\n})\r\nexport class LoginComponent implements OnInit {\r\n  /** Array of all users registered */\r\n  users: Login[]= [];\r\n  /** Static of type Login or undefined value meant to\r\n   * hold the value of the current user, if one is logged in */\r\n  static currentUser: Login | undefined;\r\n  /**Vartiable to keep track if there is a user logged in or not */\r\n  isLoggedIn: boolean= false;\r\n\r\n  constructor(private loginService: LoginService,\r\n    private location: Location,\r\n    private router: Router,\r\n    private share: SharingService){}\r\n\r\n  /**\r\n   * Actions to be performed upon the page opening\r\n   */\r\n  ngOnInit(): void {\r\n    this.getUsers();\r\n    if(LoginComponent.currentUser){\r\n      this.isLoggedIn= true;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Function to return the current user Logged In\r\n   * @returns any: current user could be of type Login or undefined\r\n   */\r\n  getCurrentUser(): any{\r\n    //return this.currentUser;\r\n    return LoginComponent.currentUser;\r\n  }\r\n  /**\r\n   * Function to get all users registered\r\n   */\r\n  getUsers(): void {\r\n    this.loginService.getUsers()\r\n    .subscribe(users => this.users = users);\r\n  }\r\n  /**\r\n   * Function to add a new user with the username passed in the parameter\r\n   * @param username : string value containing the username for the new user\r\n   * @returns : void\r\n   */\r\n  add(username: string): void {\r\n    let numUsers= this.users.length;\r\n    username = username.trim();\r\n    if (!username) { return; }\r\n    let newUser= { username } as Login\r\n    newUser.cart=[];\r\n    newUser.id= numUsers + 1;\r\n    this.loginService.addUser(newUser)\r\n      .subscribe(user => {\r\n        this.users.push(user);\r\n      });\r\n    this.router.navigateByUrl(\"/dashboard\");\r\n  }\r\n  /**\r\n   * Function to return to the last page before login\r\n   */\r\n  goBack(): void{\r\n    this.location.back();\r\n  }\r\n  /**\r\n   * Function to log the user in\r\n   * @param username : string value of username of user to log in\r\n   */\r\n  login(username: string): void{\r\n   for(let i= 0;i < this.users.length; i+=1){\r\n    if(username === this.users[i].username){\r\n      LoginComponent.currentUser= this.users[i];\r\n      break;\r\n    }\r\n   }\r\n   if(LoginComponent.currentUser){\r\n    console.log(this.users);\r\n    LoginComponent.currentUser.isLoggedIn= true;\r\n    console.log(LoginComponent.currentUser);\r\n    this.loginService.updateUser(LoginComponent.currentUser).subscribe();\r\n    this.isLoggedIn= true;\r\n    this.share.setData(LoginComponent.currentUser);\r\n    this.router.navigateByUrl(\"/login\");\r\n   }\r\n  }\r\n  /**\r\n   * Function to log out the current user\r\n   */\r\n  logout(): void{\r\n    /** Function to log user out of store */\r\n    if(LoginComponent.currentUser){\r\n      LoginComponent.currentUser.isLoggedIn= false;\r\n      for(let i=0;i<this.users.length;i+=1){\r\n        if(LoginComponent.currentUser.username === this.users[i].username){\r\n          this.users[i]= LoginComponent.currentUser;\r\n          break;\r\n        }\r\n      }\r\n      LoginComponent.currentUser= this.share.getData();\r\n      if(LoginComponent.currentUser)\r\n        this.loginService.updateUser(LoginComponent.currentUser).subscribe();\r\n      LoginComponent.currentUser= undefined;\r\n      this.share.setData(undefined);\r\n      this.isLoggedIn= false;\r\n      this.router.navigateByUrl(\"/dashboard\");\r\n    }\r\n  }\r\n}\r\n\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}