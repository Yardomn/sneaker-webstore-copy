{"ast":null,"code":"import { of } from 'rxjs';\nimport { catchError, tap } from 'rxjs/operators';\nimport { HttpHeaders } from '@angular/common/http';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"./message.service\";\nexport class LoginService {\n  constructor(http, messageService) {\n    this.http = http;\n    this.messageService = messageService;\n    this.loginURL = \"http://localhost:8080/users\";\n    this.httpOptions = {\n      headers: new HttpHeaders({\n        'Content-Type': 'application/json'\n      })\n    };\n  }\n  /** GET users from the server */\n  getUsers() {\n    return this.http.get(this.loginURL).pipe(tap(_ => this.log('fetched users')), catchError(this.handleError('getusers', [])));\n  }\n  /* GET user whose username is search term */\n  findUser(username) {\n    return this.http.get(`${this.loginURL}/?name=${username}`).pipe(tap(_ => this.log(`user ${username} logged in`)), catchError(this.handleError(`findUser name=${username}`)));\n  }\n  /** POST: add a new user to the server */\n  addUser(user) {\n    return this.http.post(this.loginURL, user, this.httpOptions).pipe(tap(newUser => this.log(`added new user ${newUser.username}`)), catchError(this.handleError('addUser')));\n  }\n  /*\n  changeLoginStatus(user: Login): Observable<Login>{\n    return null;\n  }\n  */\n  changeLoginStatus(user) {\n    if (user.isLoggedIn == false) {\n      user.isLoggedIn = true;\n      this.log('user logged in');\n    } else {\n      user.isLoggedIn = false;\n      this.log('user logged out');\n    }\n  }\n  /**\n   * HandleError and Log functions\n   */\n  /**\n   * Handle Http operation that failed.\n   * Let the app continue.\n   *\n   * @param operation - name of the operation that failed\n   * @param result - optional value to return as the observable result\n   */\n  handleError(operation = 'operation', result) {\n    return error => {\n      // TODO: send the error to remote logging infrastructure\n      console.error(error); // log to console instead\n      // TODO: better job of transforming error for user consumption\n      this.log(`${operation} failed: ${error.message}`);\n      // Let the app keep running by returning an empty result.\n      return of(result);\n    };\n  }\n  /** Log a LoginService message with the MessageService */\n  log(message) {\n    this.messageService.add(`LoginService: ${message}`);\n  }\n}\nLoginService.ɵfac = function LoginService_Factory(t) {\n  return new (t || LoginService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.MessageService));\n};\nLoginService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: LoginService,\n  factory: LoginService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"AACA,SAAqBA,EAAE,QAAQ,MAAM;AACrC,SAASC,UAAU,EAAOC,GAAG,QAAQ,gBAAgB;AAIrD,SAAqBC,WAAW,QAAQ,sBAAsB;;;;AAK9D,OAAM,MAAOC,YAAY;EAIvBC,YACUC,IAAgB,EAChBC,cAA8B;IAD9B,SAAI,GAAJD,IAAI;IACJ,mBAAc,GAAdC,cAAc;IAJhB,aAAQ,GAAU,6BAA6B;IAMvD,gBAAW,GAAG;MACZC,OAAO,EAAE,IAAIL,WAAW,CAAC;QAAE,cAAc,EAAE;MAAkB,CAAE;KAChE;EAJ2C;EAM5C;EACAM,QAAQ;IACN,OAAO,IAAI,CAACH,IAAI,CAACI,GAAG,CAAU,IAAI,CAACC,QAAQ,CAAC,CACzCC,IAAI,CACHV,GAAG,CAACW,CAAC,IAAI,IAAI,CAACC,GAAG,CAAC,eAAe,CAAC,CAAC,EACnCb,UAAU,CAAC,IAAI,CAACc,WAAW,CAAU,UAAU,EAAE,EAAE,CAAC,CAAC,CACtD;EACL;EAEA;EACAC,QAAQ,CAACC,QAAgB;IACvB,OAAO,IAAI,CAACX,IAAI,CAACI,GAAG,CAAQ,GAAG,IAAI,CAACC,QAAQ,UAAUM,QAAQ,EAAE,CAAC,CAACL,IAAI,CACpEV,GAAG,CAACW,CAAC,IAAI,IAAI,CAACC,GAAG,CAAC,QAAQG,QAAQ,YAAY,CAAC,CAAC,EAChDhB,UAAU,CAAC,IAAI,CAACc,WAAW,CAAQ,iBAAiBE,QAAQ,EAAE,CAAC,CAAC,CACjE;EACH;EAEA;EACAC,OAAO,CAACC,IAAW;IACjB,OAAO,IAAI,CAACb,IAAI,CAACc,IAAI,CAAQ,IAAI,CAACT,QAAQ,EAAEQ,IAAI,EAAE,IAAI,CAACE,WAAW,CAAC,CAACT,IAAI,CACtEV,GAAG,CAAEoB,OAAc,IAAK,IAAI,CAACR,GAAG,CAAC,kBAAkBQ,OAAO,CAACL,QAAQ,EAAE,CAAC,CAAC,EACvEhB,UAAU,CAAC,IAAI,CAACc,WAAW,CAAQ,SAAS,CAAC,CAAC,CAC/C;EACH;EACA;;;;;EAMAQ,iBAAiB,CAACJ,IAAW;IAC3B,IAAGA,IAAI,CAACK,UAAU,IAAI,KAAK,EAAC;MAC1BL,IAAI,CAACK,UAAU,GAAE,IAAI;MACrB,IAAI,CAACV,GAAG,CAAC,gBAAgB,CAAC;KAC3B,MACG;MACFK,IAAI,CAACK,UAAU,GAAE,KAAK;MACtB,IAAI,CAACV,GAAG,CAAC,iBAAiB,CAAC;;EAE/B;EAGA;;;EAIA;;;;;;;EAOQC,WAAW,CAAIU,SAAS,GAAG,WAAW,EAAEC,MAAU;IACxD,OAAQC,KAAU,IAAmB;MAEnC;MACAC,OAAO,CAACD,KAAK,CAACA,KAAK,CAAC,CAAC,CAAC;MAEtB;MACA,IAAI,CAACb,GAAG,CAAC,GAAGW,SAAS,YAAYE,KAAK,CAACE,OAAO,EAAE,CAAC;MAEjD;MACA,OAAO7B,EAAE,CAAC0B,MAAW,CAAC;IACxB,CAAC;EACH;EAEA;EACQZ,GAAG,CAACe,OAAe;IACzB,IAAI,CAACtB,cAAc,CAACuB,GAAG,CAAC,iBAAiBD,OAAO,EAAE,CAAC;EACrD;;AAlFWzB,YAAY;mBAAZA,YAAY;AAAA;AAAZA,YAAY;SAAZA,YAAY;EAAA2B,SAAZ3B,YAAY;EAAA4B,YAFX;AAAM","names":["of","catchError","tap","HttpHeaders","LoginService","constructor","http","messageService","headers","getUsers","get","loginURL","pipe","_","log","handleError","findUser","username","addUser","user","post","httpOptions","newUser","changeLoginStatus","isLoggedIn","operation","result","error","console","message","add","factory","providedIn"],"sourceRoot":"","sources":["/Users/aarohanmishra/Documents/SWEN/team-project-2225-swen-261-03-g-team0/estore-ui/src/app/login.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { Observable, of } from 'rxjs';\nimport { catchError, map, tap } from 'rxjs/operators';\nimport { MessageService } from './message.service';\nimport { Login } from './login';\n\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class LoginService {\n\n  private loginURL: string= \"http://localhost:8080/users\"\n\n  constructor(\n    private http: HttpClient,\n    private messageService: MessageService) { }\n  \n  httpOptions = {\n    headers: new HttpHeaders({ 'Content-Type': 'application/json' })\n  };\n\n  /** GET users from the server */\n  getUsers(): Observable<Login[]> {\n    return this.http.get<Login[]>(this.loginURL)\n      .pipe(\n        tap(_ => this.log('fetched users')),\n        catchError(this.handleError<Login[]>('getusers', []))\n      );\n  }\n\n  /* GET user whose username is search term */\n  findUser(username: string): Observable<Login> {\n    return this.http.get<Login>(`${this.loginURL}/?name=${username}`).pipe(\n      tap(_ => this.log(`user ${username} logged in`)),\n      catchError(this.handleError<Login>(`findUser name=${username}`))\n    );\n  }\n\n  /** POST: add a new user to the server */\n  addUser(user: Login): Observable<Login> {\n    return this.http.post<Login>(this.loginURL, user, this.httpOptions).pipe(\n      tap((newUser: Login) => this.log(`added new user ${newUser.username}`)),\n      catchError(this.handleError<Login>('addUser'))\n    );\n  }\n  /*\n  changeLoginStatus(user: Login): Observable<Login>{\n    return null;\n  }\n  */\n  \n  changeLoginStatus(user: Login): void{\n    if(user.isLoggedIn == false){\n      user.isLoggedIn= true;\n      this.log('user logged in');\n    }\n    else{\n      user.isLoggedIn= false;\n      this.log('user logged out');\n    }\n  }\n  \n\n  /**\n   * HandleError and Log functions\n   */\n\n  /**\n   * Handle Http operation that failed.\n   * Let the app continue.\n   *\n   * @param operation - name of the operation that failed\n   * @param result - optional value to return as the observable result\n   */\n  private handleError<T>(operation = 'operation', result?: T) {\n    return (error: any): Observable<T> => {\n\n      // TODO: send the error to remote logging infrastructure\n      console.error(error); // log to console instead\n\n      // TODO: better job of transforming error for user consumption\n      this.log(`${operation} failed: ${error.message}`);\n\n      // Let the app keep running by returning an empty result.\n      return of(result as T);\n    };\n  }\n\n  /** Log a LoginService message with the MessageService */\n  private log(message: string) {\n    this.messageService.add(`LoginService: ${message}`);\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}