{"ast":null,"code":"import { of } from 'rxjs';\nimport { catchError, map, tap } from 'rxjs/operators';\nimport { HttpHeaders } from '@angular/common/http';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"./message.service\";\nexport class ProductService {\n  constructor(http, messageService) {\n    this.http = http;\n    this.messageService = messageService;\n    this.productsUrl = 'http://localhost:8080/products';\n    this.httpOptions = {\n      headers: new HttpHeaders({\n        'Content-Type': 'application/json'\n      })\n    };\n  }\n  /** GET products from the server */\n  getProducts() {\n    return this.http.get(this.productsUrl).pipe(tap(_ => this.log('fetched products')), catchError(this.handleError('getProducts', [])));\n  }\n  /** GET product by id. Return `undefined` when id not found */\n  getProductNo404(id) {\n    const url = `${this.productsUrl}/?id=${id}`;\n    return this.http.get(url).pipe(map(products => products[0]),\n    // returns a {0|1} element array\n    tap(h => {\n      const outcome = h ? 'fetched' : 'did not find';\n      this.log(`${outcome} product id=${id}`);\n    }), catchError(this.handleError(`getProduct id=${id}`)));\n  }\n  /** GET product by id. Will 404 if id not found */\n  getProduct(id) {\n    const url = `${this.productsUrl}/${id}`;\n    return this.http.get(url).pipe(tap(_ => this.log(`fetched product id=${id}`)), catchError(this.handleError(`getProduct id=${id}`)));\n  }\n  /* GET products whose name contains search term */\n  searchProducts(term) {\n    if (!term.trim()) {\n      // if not search term, return empty product array.\n      return of([]);\n    }\n    return this.http.get(`${this.productsUrl}/?name=${term}`).pipe(tap(x => x.length ? this.log(`found products matching \"${term}\"`) : this.log(`no products matching \"${term}\"`)), catchError(this.handleError('searchProducts', [])));\n  }\n  //////// Save methods //////////\n  /** POST: add a new product to the server */\n  addProduct(product) {\n    return this.http.post(this.productsUrl, product, this.httpOptions).pipe(tap(newProduct => this.log(`added product w/ id=${newProduct.id}`)), catchError(this.handleError('addProduct')));\n  }\n  /** DELETE: delete the product from the server */\n  deleteProduct(id) {\n    const url = `${this.productsUrl}/${id}`;\n    return this.http.delete(url, this.httpOptions).pipe(tap(_ => this.log(`deleted product id=${id}`)), catchError(this.handleError('deleteProduct')));\n  }\n  /** PUT: update the product on the server */\n  updateProduct(product) {\n    return this.http.put(this.productsUrl, product, this.httpOptions).pipe(tap(_ => this.log(`updated product id=${product.id}`)), catchError(this.handleError('updateProduct')));\n  }\n  /**\n   * Handle Http operation that failed.\n   * Let the app continue.\n   *\n   * @param operation - name of the operation that failed\n   * @param result - optional value to return as the observable result\n   */\n  handleError(operation = 'operation', result) {\n    return error => {\n      // TODO: send the error to remote logging infrastructure\n      console.error(error); // log to console instead\n      // TODO: better job of transforming error for user consumption\n      this.log(`${operation} failed: ${error.message}`);\n      // Let the app keep running by returning an empty result.\n      return of(result);\n    };\n  }\n  /** Log a ProductService message with the MessageService */\n  log(message) {\n    this.messageService.add(`ProductService: ${message}`);\n  }\n}\nProductService.ɵfac = function ProductService_Factory(t) {\n  return new (t || ProductService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.MessageService));\n};\nProductService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: ProductService,\n  factory: ProductService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"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","names":["of","catchError","map","tap","HttpHeaders","ProductService","constructor","http","messageService","headers","getProducts","get","productsUrl","pipe","_","log","handleError","getProductNo404","id","url","products","h","outcome","getProduct","searchProducts","term","trim","x","length","addProduct","product","post","httpOptions","newProduct","deleteProduct","delete","updateProduct","put","operation","result","error","console","message","add","factory","providedIn"],"sourceRoot":"","sources":["/Users/shimantobhowmik/Downloads/School 2-2/SWEN/frontend-final/team-project-2225-swen-261-03-g-team0/estore-ui/src/app/product.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { Observable, of } from 'rxjs';\nimport { catchError, map, tap } from 'rxjs/operators';\nimport { MessageService } from './message.service';\nimport { Product } from './product';\n\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ProductService {\n\n\n  private productsUrl = 'http://localhost:8080/products'\n  \n  constructor(\n    private http: HttpClient,\n    private messageService: MessageService) { }\n  \n  httpOptions = {\n    headers: new HttpHeaders({ 'Content-Type': 'application/json' })\n  };\n\n  /** GET products from the server */\n  getProducts(): Observable<Product[]> {\n    return this.http.get<Product[]>(this.productsUrl)\n      .pipe(\n        tap(_ => this.log('fetched products')),\n        catchError(this.handleError<Product[]>('getProducts', []))\n      );\n  }\n\n  /** GET product by id. Return `undefined` when id not found */\n  getProductNo404<Data>(id: number): Observable<Product> {\n    const url = `${this.productsUrl}/?id=${id}`;\n    return this.http.get<Product[]>(url)\n      .pipe(\n        map(products => products[0]), // returns a {0|1} element array\n        tap(h => {\n          const outcome = h ? 'fetched' : 'did not find';\n          this.log(`${outcome} product id=${id}`);\n        }),\n        catchError(this.handleError<Product>(`getProduct id=${id}`))\n      );\n  }\n\n  /** GET product by id. Will 404 if id not found */\n  getProduct(id: number): Observable<Product> {\n    const url = `${this.productsUrl}/${id}`;\n    return this.http.get<Product>(url).pipe(\n      tap(_ => this.log(`fetched product id=${id}`)),\n      catchError(this.handleError<Product>(`getProduct id=${id}`))\n    );\n  }\n\n  /* GET products whose name contains search term */\n  searchProducts(term: string): Observable<Product[]> {\n    if (!term.trim()) {\n      // if not search term, return empty product array.\n      return of([]);\n    }\n    return this.http.get<Product[]>(`${this.productsUrl}/?name=${term}`).pipe(\n      tap(x => x.length ?\n         this.log(`found products matching \"${term}\"`) :\n         this.log(`no products matching \"${term}\"`)),\n      catchError(this.handleError<Product[]>('searchProducts', []))\n    );\n  }\n\n  //////// Save methods //////////\n\n  /** POST: add a new product to the server */\n  addProduct(product: Product): Observable<Product> {\n    return this.http.post<Product>(this.productsUrl, product, this.httpOptions).pipe(\n      tap((newProduct: Product) => this.log(`added product w/ id=${newProduct.id}`)),\n      catchError(this.handleError<Product>('addProduct'))\n    );\n  }\n\n  /** DELETE: delete the product from the server */\n  deleteProduct(id: number): Observable<Product> {\n    const url = `${this.productsUrl}/${id}`;\n\n    return this.http.delete<Product>(url, this.httpOptions).pipe(\n      tap(_ => this.log(`deleted product id=${id}`)),\n      catchError(this.handleError<Product>('deleteProduct'))\n    );\n  }\n\n  /** PUT: update the product on the server */\n  updateProduct(product: Product): Observable<any> {\n    return this.http.put(this.productsUrl, product, this.httpOptions).pipe(\n      tap(_ => this.log(`updated product id=${product.id}`)),\n      catchError(this.handleError<any>('updateProduct'))\n    );\n  }\n\n  /**\n   * Handle Http operation that failed.\n   * Let the app continue.\n   *\n   * @param operation - name of the operation that failed\n   * @param result - optional value to return as the observable result\n   */\n  private handleError<T>(operation = 'operation', result?: T) {\n    return (error: any): Observable<T> => {\n\n      // TODO: send the error to remote logging infrastructure\n      console.error(error); // log to console instead\n\n      // TODO: better job of transforming error for user consumption\n      this.log(`${operation} failed: ${error.message}`);\n\n      // Let the app keep running by returning an empty result.\n      return of(result as T);\n    };\n  }\n\n  /** Log a ProductService message with the MessageService */\n  private log(message: string) {\n    this.messageService.add(`ProductService: ${message}`);\n  }\n}\n\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}