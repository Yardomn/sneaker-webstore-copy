{"ast":null,"code":"import { Subject } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../login.service\";\nimport * as i2 from \"@angular/common\";\nfunction LoginComponent_div_16_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r4 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"div\")(1, \"h2\");\n    i0.ɵɵtext(2, \"Logout:\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"button\", 8);\n    i0.ɵɵlistener(\"click\", function LoginComponent_div_16_Template_button_click_3_listener() {\n      i0.ɵɵrestoreView(_r4);\n      const ctx_r3 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r3.logout());\n    });\n    i0.ɵɵtext(4, \" Logout \");\n    i0.ɵɵelementEnd()();\n  }\n}\nexport class LoginComponent {\n  constructor(loginService) {\n    this.loginService = loginService;\n    this.users = [];\n    this.enteredUsername = new Subject();\n  }\n  ngOnInit() {\n    this.getUsers();\n  }\n  getUsers() {\n    this.loginService.getUsers().subscribe(users => this.users = users);\n  }\n  //we need a function that gets the name of what is entered into the box. This will be sent to the backend to check\n  //if the name is an admin or a customer\n  /**\n  getUsername(username: string): void{\n    //this.productService.getProducts()\n    //.subscribe(cart => this.cart= cart);\n    this.username= username;\n  }\n  */\n  add(username) {\n    username = username.trim();\n    if (!username) {\n      return;\n    }\n    this.loginService.addUser({\n      username\n    }).subscribe(user => {\n      this.users.push(user);\n    });\n  }\n  search(username) {\n    //Function to search if the user of this username exists or not\n    this.loginService.findUser(username).subscribe(user => this.currentUser = user);\n    this.changeLoginStatus();\n  }\n  changeLoginStatus() {\n    if (this.currentUser.isLoggedIn == true) {\n      this.currentUser.isLoggedIn = false;\n    } else {\n      this.currentUser.isLoggedIn = true;\n    }\n  }\n  logout() {\n    /** Function to log user out of store */\n    this.changeLoginStatus();\n  }\n}\nLoginComponent.ɵfac = function LoginComponent_Factory(t) {\n  return new (t || LoginComponent)(i0.ɵɵdirectiveInject(i1.LoginService));\n};\nLoginComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: LoginComponent,\n  selectors: [[\"app-login\"]],\n  decls: 17,\n  vars: 1,\n  consts: [[\"for\", \"new-user\"], [\"id\", \"new-user\"], [\"userName\", \"\"], [\"type\", \"button\", 1, \"add-button\", 3, \"click\"], [\"for\", \"returning-user\"], [\"id\", \"returning-user\"], [\"type\", \"button\", 1, \"search-button\", 3, \"click\"], [4, \"ngIf\"], [\"type\", \"button\", 1, \"logout-button\", 3, \"click\"]],\n  template: function LoginComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      const _r5 = i0.ɵɵgetCurrentView();\n      i0.ɵɵelementStart(0, \"h2\");\n      i0.ɵɵtext(1, \"Login:\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(2, \"div\")(3, \"label\", 0);\n      i0.ɵɵtext(4, \"New User: \");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(5, \"input\", 1, 2);\n      i0.ɵɵelementStart(7, \"button\", 3);\n      i0.ɵɵlistener(\"click\", function LoginComponent_Template_button_click_7_listener() {\n        i0.ɵɵrestoreView(_r5);\n        const _r0 = i0.ɵɵreference(6);\n        ctx.add(_r0.value);\n        return i0.ɵɵresetView(_r0.value = \"\");\n      });\n      i0.ɵɵtext(8, \" Add User \");\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(9, \"div\")(10, \"label\", 4);\n      i0.ɵɵtext(11, \"Login: \");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(12, \"input\", 5, 2);\n      i0.ɵɵelementStart(14, \"button\", 6);\n      i0.ɵɵlistener(\"click\", function LoginComponent_Template_button_click_14_listener() {\n        i0.ɵɵrestoreView(_r5);\n        const _r0 = i0.ɵɵreference(6);\n        ctx.search(_r0.value);\n        return i0.ɵɵresetView(_r0.value = \"\");\n      });\n      i0.ɵɵtext(15, \" Login \");\n      i0.ɵɵelementEnd()();\n      i0.ɵɵtemplate(16, LoginComponent_div_16_Template, 5, 0, \"div\", 7);\n    }\n    if (rf & 2) {\n      i0.ɵɵadvance(16);\n      i0.ɵɵproperty(\"ngIf\", ctx.currentUser.isLoggedIn);\n    }\n  },\n  dependencies: [i2.NgIf],\n  styles: [\"\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n});","map":{"version":3,"mappings":"AACA,SAAqBA,OAAO,QAAQ,MAAM;;;;;;;ICsB1CC,2BAAoC;IAC9BA,uBAAO;IAAAA,iBAAK;IAChBA,iCAA+D;IAAnBA;MAAAA;MAAA;MAAA,OAASA,8BAAQ;IAAA,EAAC;IAC5DA,wBACF;IAAAA,iBAAS;;;ADdX,OAAM,MAAOC,cAAc;EAOzBC,YAAoBC,YAA0B;IAA1B,iBAAY,GAAZA,YAAY;IALhC,UAAK,GAAW,EAAE;IAEV,oBAAe,GAAG,IAAIJ,OAAO,EAAU;EAGC;EAEhDK,QAAQ;IACN,IAAI,CAACC,QAAQ,EAAE;EACjB;EAEAA,QAAQ;IACN,IAAI,CAACF,YAAY,CAACE,QAAQ,EAAE,CAC3BC,SAAS,CAACC,KAAK,IAAI,IAAI,CAACA,KAAK,GAAGA,KAAK,CAAC;EACzC;EAEA;EACA;EACA;;;;;;;EAQAC,GAAG,CAACC,QAAgB;IAClBA,QAAQ,GAAGA,QAAQ,CAACC,IAAI,EAAE;IAC1B,IAAI,CAACD,QAAQ,EAAE;MAAE;;IACjB,IAAI,CAACN,YAAY,CAACQ,OAAO,CAAC;MAAEF;IAAQ,CAAW,CAAC,CAC7CH,SAAS,CAACM,IAAI,IAAG;MAChB,IAAI,CAACL,KAAK,CAACM,IAAI,CAACD,IAAI,CAAC;IACvB,CAAC,CAAC;EACN;EAEAE,MAAM,CAACL,QAAgB;IACrB;IACA,IAAI,CAACN,YAAY,CAACY,QAAQ,CAACN,QAAQ,CAAC,CACnCH,SAAS,CACRM,IAAI,IAAI,IAAI,CAACI,WAAW,GAAGJ,IAAI,CAC9B;IACH,IAAI,CAACK,iBAAiB,EAAE;EAC1B;EAEAA,iBAAiB;IACf,IAAG,IAAI,CAACD,WAAW,CAACE,UAAU,IAAI,IAAI,EAAC;MACrC,IAAI,CAACF,WAAW,CAACE,UAAU,GAAE,KAAK;KACnC,MACG;MACF,IAAI,CAACF,WAAW,CAACE,UAAU,GAAE,IAAI;;EAErC;EAEAC,MAAM;IACJ;IACA,IAAI,CAACF,iBAAiB,EAAE;EAC1B;;AA1DWhB,cAAc;mBAAdA,cAAc;AAAA;AAAdA,cAAc;QAAdA,cAAc;EAAAmB;EAAAC;EAAAC;EAAAC;EAAAC;IAAA;;MCZzBxB,0BAAI;MAAAA,sBAAM;MAAAA,iBAAK;MACfA,2BAAK;MACqBA,0BAAU;MAAAA,iBAAQ;MACxCA,8BAAiC;MAGjCA,iCAA0F;MAAjDA;QAAAA;QAAA;QAASyB,kBAAmB;QAAA,OAAEzB,2BAAe,EAAE;MAAA,EAAC;MACvFA,0BACF;MAAAA,iBAAS;MAGbA,2BAAK;MAC2BA,wBAAO;MAAAA,iBAAQ;MAC3CA,+BAAuC;MAGvCA,kCAAgG;MAApDA;QAAAA;QAAA;QAASyB,qBAAsB;QAAA,OAAEzB,2BAAe,EAAE;MAAA,EAAC;MAC7FA,wBACF;MAAAA,iBAAS;MAIfA,iEAKM;;;MALAA,gBAA4B;MAA5BA,iDAA4B","names":["Subject","i0","LoginComponent","constructor","loginService","ngOnInit","getUsers","subscribe","users","add","username","trim","addUser","user","push","search","findUser","currentUser","changeLoginStatus","isLoggedIn","logout","selectors","decls","vars","consts","template","ctx"],"sourceRoot":"","sources":["/Users/aarohanmishra/Documents/SWEN/team-project-2225-swen-261-03-g-team0/estore-ui/src/app/login/login.component.ts","/Users/aarohanmishra/Documents/SWEN/team-project-2225-swen-261-03-g-team0/estore-ui/src/app/login/login.component.html"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { Observable, Subject } from 'rxjs';\nimport {\n  debounceTime, distinctUntilChanged, switchMap\n} from 'rxjs/operators';\nimport { Login } from '../login';\nimport { LoginService } from '../login.service';\n\n@Component({\n  selector: 'app-login',\n  templateUrl: './login.component.html',\n  styleUrls: ['./login.component.css']\n})\nexport class LoginComponent implements OnInit {\n\n  users: Login[]= [];\n  username$!: Observable<Login[]>;\n  private enteredUsername = new Subject<string>();\n  currentUser!: Login; \n\n  constructor(private loginService: LoginService){}\n\n  ngOnInit(): void {\n    this.getUsers();\n  }\n\n  getUsers(): void {\n    this.loginService.getUsers()\n    .subscribe(users => this.users = users);\n  }\n\n  //we need a function that gets the name of what is entered into the box. This will be sent to the backend to check\n  //if the name is an admin or a customer\n  /**\n  getUsername(username: string): void{\n    //this.productService.getProducts()\n    //.subscribe(cart => this.cart= cart);\n    this.username= username;\n  }\n  */\n\n  add(username: string): void {\n    username = username.trim();\n    if (!username) { return; }\n    this.loginService.addUser({ username } as Login)\n      .subscribe(user => {\n        this.users.push(user);\n      });\n  }\n\n  search(username: string): void{\n    //Function to search if the user of this username exists or not\n    this.loginService.findUser(username)\n    .subscribe(\n      user => this.currentUser = user\n      );\n    this.changeLoginStatus();\n  }\n\n  changeLoginStatus(): void{\n    if(this.currentUser.isLoggedIn == true){\n      this.currentUser.isLoggedIn= false;\n    }\n    else{\n      this.currentUser.isLoggedIn= true;\n    }\n  }\n\n  logout(): void{\n    /** Function to log user out of store */\n    this.changeLoginStatus();\n  }\n}\n\n","\n  <h2>Login:</h2>\n  <div>\n      <label for=\"new-user\">New User: </label>\n      <input id=\"new-user\" #userName />\n  \n      <!-- (click) passes input value to add() and then clears the input -->\n      <button type=\"button\" class=\"add-button\" (click)=\"add(userName.value); userName.value=''\">\n        Add User\n      </button>\n  </div>\n  \n  <div>\n      <label for=\"returning-user\">Login: </label>\n      <input id=\"returning-user\" #userName />\n  \n      \n      <button type=\"button\" class=\"search-button\" (click)=\"search(userName.value); userName.value=''\">\n        Login\n      </button>\n  </div>\n\n\n<div *ngIf=\"currentUser.isLoggedIn\">\n  <h2>Logout:</h2>\n  <button type=\"button\" class=\"logout-button\" (click)=\"logout()\">\n    Logout\n  </button>\n</div>"]},"metadata":{},"sourceType":"module","externalDependencies":[]}