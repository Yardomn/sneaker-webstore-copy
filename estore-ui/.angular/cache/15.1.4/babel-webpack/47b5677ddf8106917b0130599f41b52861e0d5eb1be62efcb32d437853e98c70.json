{"ast":null,"code":"import { of } from 'rxjs';\nimport { catchError, tap } from 'rxjs/operators';\nimport { HttpHeaders } from '@angular/common/http';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"./message.service\";\nexport class LoginService {\n  constructor(http, messageService) {\n    this.http = http;\n    this.messageService = messageService;\n    this.loginURL = \"http://localhost:8080/users\";\n    this.httpOptions = {\n      headers: new HttpHeaders({\n        'Content-Type': 'application/json'\n      })\n    };\n  }\n  /** GET users from the server */\n  getUsers() {\n    return this.http.get(this.loginURL).pipe(tap(_ => this.log('fetched users')), catchError(this.handleError('getusers', [])));\n  }\n  /* GET user whose username is search term */\n  findUser(username) {\n    return this.http.get(`${this.loginURL}/?username=${username}`).pipe(tap(x => x ? this.log(`user ${username} logged in`) : this.log(`no user found`)), catchError(this.handleError(`findUser name=${username}`)));\n  }\n  /* GET user whose isLoggedIn status is true */\n  getLoggedInUser() {\n    return this.http.get(`${this.loginURL}/?isLoggedIn=${true}`).pipe(tap(x => x ? this.log(`user ${x.username} found`) : this.log(`no user found`)), catchError(this.handleError(`getLoggedInUser=${true}`)));\n  }\n  /** POST: add a new user to the server */\n  addUser(user) {\n    return this.http.post(this.loginURL, user, this.httpOptions).pipe(tap(newUser => this.log(`added new user ${newUser.username}`)), catchError(this.handleError('addUser')));\n  }\n  /** PUT: update the user on the server */\n  updateUser(user) {\n    return this.http.put(this.loginURL, user, this.httpOptions).pipe(tap(_ => this.log(`updated user login status for user ${user.username}}`)), catchError(this.handleError('updateUserStatus')));\n  }\n  testMessage(user) {\n    if (user) {\n      this.log(`user is defined`);\n    } else {\n      this.log(`user is undefined`);\n    }\n  }\n  /**\n   * HandleError and Log functions\n   */\n  /**\n   * Handle Http operation that failed.\n   * Let the app continue.\n   *\n   * @param operation - name of the operation that failed\n   * @param result - optional value to return as the observable result\n   */\n  handleError(operation = 'operation', result) {\n    return error => {\n      // TODO: send the error to remote logging infrastructure\n      console.error(error); // log to console instead\n      // TODO: better job of transforming error for user consumption\n      this.log(`${operation} failed: ${error.message}`);\n      // Let the app keep running by returning an empty result.\n      return of(result);\n    };\n  }\n  /** Log a LoginService message with the MessageService */\n  log(message) {\n    this.messageService.add(`LoginService: ${message}`);\n  }\n  //Shopping cart methods\n  setCurrUser(user) {\n    this.currUser = user;\n  }\n  getCurrUser() {\n    if (this.currUser != undefined) {\n      return this.currUser;\n    }\n    return undefined;\n  }\n  logOut() {\n    if (this.currUser != undefined) {\n      this.currUser.isLoggedIn = false;\n      this.updateUser(this.currUser).subscribe(currUser => this.currUser = currUser);\n    }\n  }\n}\nLoginService.ɵfac = function LoginService_Factory(t) {\n  return new (t || LoginService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.MessageService));\n};\nLoginService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: LoginService,\n  factory: LoginService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"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","names":["of","catchError","tap","HttpHeaders","LoginService","constructor","http","messageService","headers","getUsers","get","loginURL","pipe","_","log","handleError","findUser","username","x","getLoggedInUser","addUser","user","post","httpOptions","newUser","updateUser","put","testMessage","operation","result","error","console","message","add","setCurrUser","currUser","getCurrUser","undefined","logOut","isLoggedIn","subscribe","factory","providedIn"],"sourceRoot":"","sources":["/Users/shimantobhowmik/Downloads/School 2-2/SWEN/frontend-test/team-project-2225-swen-261-03-g-team0/estore-ui/src/app/login.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { Observable, of } from 'rxjs';\nimport { catchError, tap } from 'rxjs/operators';\nimport { MessageService } from './message.service';\nimport { Login } from './login';\n\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class LoginService {\n\n  private loginURL: string= \"http://localhost:8080/users\"\n  private currUser : Login|undefined;\n\n  constructor(\n    private http: HttpClient,\n    private messageService: MessageService) { }\n  \n  httpOptions = {\n    headers: new HttpHeaders({ 'Content-Type': 'application/json' })\n  };\n\n  /** GET users from the server */\n  getUsers(): Observable<Login[]> {\n    return this.http.get<Login[]>(this.loginURL)\n      .pipe(\n        tap(_ => this.log('fetched users')),\n        catchError(this.handleError<Login[]>('getusers', []))\n      );\n  }\n\n  /* GET user whose username is search term */\n  findUser(username: string): Observable<Login> {\n    return this.http.get<Login>(`${this.loginURL}/?username=${username}`).pipe(\n      tap(x => x ? this.log(`user ${username} logged in`) : this.log(`no user found`)),\n      catchError(this.handleError<Login>(`findUser name=${username}`))\n    );\n  }\n  /* GET user whose isLoggedIn status is true */\n  getLoggedInUser(): Observable<Login>{\n    return this.http.get<Login>(`${this.loginURL}/?isLoggedIn=${true}`).pipe(\n      tap(x => x ? this.log(`user ${x.username} found`) : this.log(`no user found`)),\n      catchError(this.handleError<Login>(`getLoggedInUser=${true}`))\n    );\n  }\n\n  /** POST: add a new user to the server */\n  addUser(user: Login): Observable<Login> {\n    return this.http.post<Login>(this.loginURL, user, this.httpOptions).pipe(\n      tap((newUser: Login) => this.log(`added new user ${newUser.username}`)),\n      catchError(this.handleError<Login>('addUser'))\n    );\n  }\n  \n  /** PUT: update the user on the server */\n  updateUser(user: Login): Observable<any> {\n    return this.http.put(this.loginURL, user, this.httpOptions).pipe(\n      tap(_ => this.log(`updated user login status for user ${user.username}}`)),\n      catchError(this.handleError<any>('updateUserStatus'))\n    );\n  }\n  \n  testMessage(user: Login): void{\n    if(user){\n      this.log(`user is defined`);\n    }\n    else{\n      this.log(`user is undefined`);\n    }\n  }\n  /**\n   * HandleError and Log functions\n   */\n\n  /**\n   * Handle Http operation that failed.\n   * Let the app continue.\n   *\n   * @param operation - name of the operation that failed\n   * @param result - optional value to return as the observable result\n   */\n  private handleError<T>(operation = 'operation', result?: T) {\n    return (error: any): Observable<T> => {\n\n      // TODO: send the error to remote logging infrastructure\n      console.error(error); // log to console instead\n\n      // TODO: better job of transforming error for user consumption\n      this.log(`${operation} failed: ${error.message}`);\n\n      // Let the app keep running by returning an empty result.\n      return of(result as T);\n    };\n  }\n\n  /** Log a LoginService message with the MessageService */\n  private log(message: string) {\n    this.messageService.add(`LoginService: ${message}`);\n  }\n\n  //Shopping cart methods\n\n  setCurrUser(user : Login | undefined){\n    this.currUser = user;\n  }\n\n  getCurrUser() : Login|undefined{\n    if (this.currUser != undefined){\n      return this.currUser;\n    }\n    return undefined;\n  }\n  logOut(){\n    if( this.currUser != undefined){\n      this.currUser.isLoggedIn = false;\n      this.updateUser(this.currUser).subscribe(currUser => this.currUser = currUser);\n    }\n  }\n\n\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}